<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>atmvc_tableview</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import Foundation
import Cartography
import MeMeKit
import MJRefresh
import MeMeComponents

class ChatHistoryListVC : UIViewController {
    
    //MARK: &lt;&gt;外部变量
    
    //MARK: &lt;&gt;外部block
    
    //MARK: &lt;&gt;生命周期开始
    required init() {
        super.init(nibName: nil, bundle: nil)
        
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.memeNavBar.tilte = "交易明细"
        self.memeNavBar.addLeftBtns(btns: [self.lyNavBackBtn])
        self.memeNavBar.backgroundColor = .white
        self.view.backgroundColor = UIColor.hexString(toColor: "f8f8f8")
        setupViews()
        
        self.loadData()
    }
    
    func setupViews() {
        self.view.addSubview(self.tableView)
        constrain(self.tableView) {
            $0.left == $0.superview!.left
            $0.right == $0.superview!.right
            $0.top == $0.superview!.top + MeMeNavigationBar.fixHeight
            $0.bottom == $0.superview!.bottom
        }
    }
    
    //MARK: &lt;&gt;功能性方法
    func createRefreshHeader() -&gt; MJRefreshHeader{
        let header: MJRefreshStateHeader = MJRefreshNormalHeader() { [weak self] in
            self?.doPullRefresh(ispull:true)
        }
        header.lastUpdatedTimeLabel?.isHidden = true;
        header.isAutomaticallyChangeAlpha = true
        return header
    }
    
    func createRefreshFooter() -&gt; MJRefreshFooter {
        let footer: MJRefreshAutoStateFooter = MJRefreshAutoNormalFooter() { [weak self] in
            self?.doPullRefresh(ispull: false)
        }
        footer.isAutomaticallyChangeAlpha = true
        return footer
    }
    
    func doPullRefresh(ispull: Bool) {
        if !NetworkListener.shared.isNetworkReachability {
            if let pulUpRefresh = self.tableView.mj_header , pulUpRefresh.isRefreshing {
                pulUpRefresh.endRefreshing()
            }
            if let pulUpRefresh = self.tableView.mj_footer , pulUpRefresh.isRefreshing {
                if let footer: MJRefreshAutoNormalFooter = pulUpRefresh as? MJRefreshAutoNormalFooter {
                    footer.stateLabel?.isHidden = true
                }
                pulUpRefresh.endRefreshing()
            }
            return
        }
        loadData(isNext: !ispull)
    }
    
    func loadData(isNext:Bool = false) {
        if !NetworkListener.shared.isNetworkReachability {
            if let mj_footer = tableView.mj_header, mj_footer.isRefreshing {
                mj_footer.endRefreshing()
            }
            if let mj_footer = tableView.mj_footer, mj_footer.isRefreshing {
                mj_footer.endRefreshing()
            }
            return
        }
        if let footer: MJRefreshAutoNormalFooter = tableView.mj_footer as? MJRefreshAutoNormalFooter {
            if isNext == false {
                footer.resetNoMoreData()
            } else {
                footer.stateLabel?.isHidden = false
            }
        }
        let isRealNext = (try? self.loadViewModel.infosObser.value()) == nil ? false : isNext
        if isRealNext == false {
            self.tableView.showEmptyView(false)
            self.tableView.reloadData()
        }
        
        loadViewModel.loadData(isNext: isRealNext, targetBlock: { page, size in
            return LinYuAPI.mainHot(page: page, size: size)
        }, dataKey: "list") {  [weak self] (hasNext,error) in
            if isRealNext == false {
                if let pullRefresh = self?.tableView.mj_header , pullRefresh.isRefreshing {
                    pullRefresh.endRefreshing()
                }
            }
            
            if error == nil {
                if hasNext == false {
                    self?.tableView.mj_footer?.endRefreshingWithNoMoreData()
                } else {
                    self?.tableView.mj_footer?.endRefreshing()
                }
                
                if let footer: MJRefreshAutoNormalFooter = self?.tableView.mj_footer as? MJRefreshAutoNormalFooter {
                    footer.stateLabel?.isHidden = true
                }
                self?.tableView.fun_reloadData()
            }else{
                if let footer: MJRefreshAutoNormalFooter = self?.tableView.mj_footer as? MJRefreshAutoNormalFooter {
                    footer.stateLabel?.isHidden = true
                }
                self?.tableView.mj_footer?.endRefreshing()
                HUD.flash2(NELocalize.localizedString("Network connection failed", comment: "totest"))
            }
        }
    }
    
    //MARK: &lt;&gt;内部View
    fileprivate lazy var tableView: UITableView = {
        let tableView: UITableView = UITableView(frame: CGRect(x: 0, y: 0, width: self.view.width, height: self.view.height))
        tableView.registerClass(ChatHistoryListCell.self)
        tableView.allowsSelection = false
        tableView.separatorStyle = .none
        tableView.scrollsToTop = true
        tableView.dataSource = self
        tableView.delegate = self
        let extraBottom = UIWindow.keyWindowSafeAreaInsets().bottom &gt; 0 ? UIWindow.keyWindowSafeAreaInsets().bottom : 10
        tableView.contentInset = UIEdgeInsets.init(top: 12, left: 0, bottom: extraBottom, right: 0)
        tableView.emptyView = emptyView
        tableView.mj_header = createRefreshHeader()
        tableView.mj_footer = createRefreshFooter()
        tableView.scrollEnabledWhenEmpty = true
        tableView.backgroundColor = UIColor.clear
        if #available(iOS 15.0, *) {
            tableView.sectionHeaderTopPadding = 0
        }
        return tableView
    }()
    
    fileprivate lazy var emptyView: EmptyView = {
        let view = EmptyView()
        view.backgroundColor = UIColor.clear
        view.image = nil
        view.textLabel.text = NELocalize.localizedString("无内容", comment: "totest")
        return view
    }()
    //MARK: &lt;&gt;内部UI变量
    //MARK: &lt;&gt;内部数据变量
    fileprivate var loadViewModel:CommonLoadViewModel&lt;ChatHistoryInfo,LinYuAPI&gt; = {
        let model = CommonLoadViewModel&lt;ChatHistoryInfo,LinYuAPI&gt;()
        return model
    }()
    //MARK: &lt;&gt;内部block
    
}

extension ChatHistoryListVC : UITableViewDelegate,UITableViewDataSource {
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -&gt; CGFloat {
        let cell = self.tableView(tableView, cellForRowAt: indexPath)
        let size = cell.systemLayoutSizeFitting(CGSize.init(width: UIScreen.main.bounds.width, height: 0))
        return size.height
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat {
        return UITableView.automaticDimension
    }
    func numberOfSections(in tableView: UITableView) -&gt; Int {
        if let values = (try? self.loadViewModel.infosObser.value()) {
            return values.count
        }
        
        return 0
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {
        let cell = tableView.dequeueReusableCell(ChatHistoryListCell.self, forIndexPath: indexPath)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -&gt; CGFloat {
        return 20.0
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -&gt; UIView? {
        return UIView()
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>E6014439-6A5A-4BB4-9FD1-42D00B03DAB8</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>atmvc_tableview</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>

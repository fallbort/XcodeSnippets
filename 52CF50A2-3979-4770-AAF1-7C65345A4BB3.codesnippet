<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>atmakecreatevc_scrollview</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import Foundation
import Cartography
import MeMeKit

class AccusationVC : UIViewController {
    
    //MARK: &lt;&gt;外部变量
    
    //MARK: &lt;&gt;外部block
    
    //MARK: &lt;&gt;生命周期开始
    required init() {
        super.init(nibName: nil, bundle: nil)
        
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = .white
        self.memeNavBar.tilte = NELocalize.localizedString("举报理由",comment: "totest")
        self.memeNavBar.addLeftRightBtns(btnInfos: [
            (UIImage(named:"Base/nav_back"),nil,{ [weak self] in
            self?.navigationController?.popViewController(animated: true)
        })
        ], isLeft: true)
        setupViews()
    }
    
    func setupViews() {
        let backView = UIView()
        self.view.addSubview(backView)
        constrain(backView) {
            $0.left == $0.superview!.left
            $0.right == $0.superview!.right
            $0.top == $0.superview!.top
            $0.bottom == $0.superview!.bottom
        }
        backView.addSubview(self.scrollView)
        constrain(self.scrollView) {
            $0.left == $0.superview!.left
            $0.right == $0.superview!.right
            $0.top == $0.superview!.top
            $0.bottom == $0.superview!.bottom
        }
        
        let extraBottom = UIWindow.keyWindowSafeAreaInsets().bottom &gt; 0 ? UIWindow.keyWindowSafeAreaInsets().bottom - 1 : 10 - 1
        self.scrollView.addSubview(self.contentView)
        constrain(self.contentView) {
            $0.left == $0.superview!.left
            $0.right == $0.superview!.right
            $0.width == $0.superview!.width
            $0.top == $0.superview!.top
            $0.bottom == $0.superview!.bottom
            $0.height &gt;= $0.superview!.height - extraBottom
        }
    }
    
    //MARK: &lt;&gt;功能性方法
    //MARK: &lt;&gt;内部View
    fileprivate lazy var scrollView: UIScrollView = {
        let view: UIScrollView = UIScrollView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: self.view.bounds.height))
        let extraBottom = UIWindow.keyWindowSafeAreaInsets().bottom &gt; 0 ? UIWindow.keyWindowSafeAreaInsets().bottom : 10
        view.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: extraBottom, right: 0)
        view.showsVerticalScrollIndicator = false
        view.showsHorizontalScrollIndicator = false
        view.contentInsetAdjustmentBehavior = .never
        view.keyboardDismissMode = .onDrag
        view.handleTapGesture { [weak self] in
            self?.view.endEditing(true)
        }
        return view
    }()
    
    var contentView: UIView = {
        let view = UIView()
        return view
    }()
    //MARK: &lt;&gt;内部UI变量
    //MARK: &lt;&gt;内部数据变量
    //MARK: &lt;&gt;内部block
    
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>52CF50A2-3979-4770-AAF1-7C65345A4BB3</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>atmakecreatevc_scrollview</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
